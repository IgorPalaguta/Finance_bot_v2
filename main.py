import telebot
import sqlite3

from datetime import datetime
from telebot import types
import pytesseract
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from PIL import Image
import re
import io

pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

bot = telebot.TeleBot('7882507904:AAG3bvuxPQYhxfDrLR3MFEPgssHbnoQ4J_s')

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect('expenses.db', check_same_thread=False)
cursor = conn.cursor()

# –û–Ω–æ–≤–ª–µ–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
cursor.execute('''CREATE TABLE IF NOT EXISTS expenses (
                    id INTEGER PRIMARY KEY,
                    user_id INTEGER,
                    amount REAL,
                    category TEXT,
                    date TEXT,
                    FOREIGN KEY (user_id) REFERENCES users(id))''')

cursor.execute('''CREATE TABLE IF NOT EXISTS categories (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    name TEXT NOT NULL,
                    UNIQUE(user_id, name),
                    FOREIGN KEY (user_id) REFERENCES users(id))''')

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_id INTEGER UNIQUE NOT NULL)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS budgets (
                    user_id INTEGER PRIMARY KEY,
                    amount REAL,
                    FOREIGN KEY (user_id) REFERENCES users(id))''')

conn.commit()

# –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}


def get_user_id(telegram_id):
    cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
    user = cursor.fetchone()
    if user:
        return user[0]
    cursor.execute("INSERT INTO users (telegram_id) VALUES (?)", (telegram_id,))
    conn.commit()
    return cursor.lastrowid


def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    btn_webapp = KeyboardButton("üåê –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤–µ–±-–∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫", web_app=WebAppInfo(url="https://finance-bot-v2.onrender.com"))
    markup.add(btn_webapp)
    return markup

def start(update, context):
    user = update.effective_user
    init_data = update.callback_query.message.chat.id  # ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    button = InlineKeyboardMarkup([
        [InlineKeyboardButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ Web App", url=f"https://finance-bot-v2.onrender.com?user_id={user.id}")]
    ])
    
    context.bot.send_message(chat_id=user.id, text="–í—ñ–¥–∫—Ä–∏–π—Ç–µ –≤–µ–±-–∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫:", reply_markup=button)

@bot.message_handler(func=lambda message: message.text in ["‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", "üí∞ –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç", "üí∞ –ó–∞–ª–∏—à–æ–∫ –±—é–¥–∂–µ—Ç—É", "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"])
def handle_buttons(message):
    if message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É":
        add_expense(message)
    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        view_stats(message)
    elif message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é":
        add_category(message)
    elif message.text == "üí∞ –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç":
        set_budget(message)
    elif message.text == "üí∞ –ó–∞–ª–∏—à–æ–∫ –±—é–¥–∂–µ—Ç—É":
        check_budget(message)  # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ª–∏—à–∫—É –±—é–¥–∂–µ—Ç—É
    elif message.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞":
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                                          "/add - –¥–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É\n"
                                          "/stats - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                                          "/addcategory - –¥–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é\n"
                                          "/budget - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–ª–∏—à–æ–∫ –±—é–¥–∂–µ—Ç—É\n"
                                          "/start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")


@bot.message_handler(func=lambda message: message.text == "üí∞ –ó–∞–ª–∏—à–æ–∫ –±—é–¥–∂–µ—Ç—É")
def handle_budget_balance(message):
    check_budget(message)

@bot.message_handler(func=lambda message: message.text == "üí∞ –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç")
def set_budget(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –≤–∞—à–æ–≥–æ –±—é–¥–∂–µ—Ç—É –Ω–∞ –º—ñ—Å—è—Ü—å:")
    bot.register_next_step_handler(message, save_budget)

def save_budget(message):
    try:
        amount = float(message.text.replace(',', '.'))
        user_id = get_user_id(message.chat.id)
        cursor.execute("INSERT INTO budgets (user_id, amount) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET amount = excluded.amount",(user_id, amount))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –ë—é–¥–∂–µ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {amount} –≥—Ä–Ω")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É.")

@bot.message_handler(commands=['start'])
def start_message(message):
    get_user_id(message.chat.id)
    bot.send_message(message.chat.id, "–í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())


@bot.message_handler(commands=['add'])
def add_expense(message):
    get_user_id(message.chat.id)
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç:")
    bot.register_next_step_handler(message, get_amount)


def update_budget(user_id, amount):
    cursor.execute("SELECT amount FROM budgets WHERE user_id = ?", (user_id,))
    budget = cursor.fetchone()

    if budget:
        new_budget = budget[0] - amount
        cursor.execute("UPDATE budgets SET amount = ? WHERE user_id = ?", (new_budget, user_id))
        conn.commit()


def get_amount(message):
    try:
        amount = float(message.text.replace(',', '.'))
        user_id = get_user_id(message.chat.id)
        user_data[message.chat.id] = {'amount': amount}

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –±—é–¥–∂–µ—Ç
        cursor.execute("SELECT amount FROM budgets WHERE user_id = ?", (user_id,))

        budget = cursor.fetchone()
        if budget and budget[0] < amount:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –í–∞—à –±—é–¥–∂–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –¥–ª—è —Ü—ñ—î—ó –≤–∏—Ç—Ä–∞—Ç–∏!")
            return

        cursor.execute("SELECT name FROM categories WHERE user_id = ?", (user_id,))
        categories = [row[0] for row in cursor.fetchall()]

        if not categories:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π! –î–æ–¥–∞–π—Ç–µ –Ω–æ–≤—É –∫–æ–º–∞–Ω–¥–æ—é /addcategory")
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for category in categories:
            markup.add(types.KeyboardButton(category))
        markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"))

        bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç:", reply_markup=markup)
        bot.register_next_step_handler(message, get_category)
    except ValueError:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É.")


def get_category(message):
    if message.text == "üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é":
        bot.send_message(message.chat.id, "üî∏ –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())
        return

    user_id = get_user_id(message.chat.id)
    category = message.text
    amount = user_data[message.chat.id]['amount']
    date = datetime.now().strftime('%Y-%m-%d')

    cursor.execute("INSERT INTO expenses (user_id, amount, category, date) VALUES (?, ?, ?, ?)",
                   (user_id, amount, category, date))
    conn.commit()

    # –û–Ω–æ–≤–ª—é—î–º–æ –±—é–¥–∂–µ—Ç
    update_budget(user_id, amount)

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ª–∏—à–æ–∫ –±—é–¥–∂–µ—Ç—É
    remaining_budget = get_budget_balance(user_id)

    if remaining_budget is not None:
        bot.send_message(message.chat.id,
                         f"‚úÖ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç–∏: {amount} –≥—Ä–Ω –Ω–∞ {category}\nüí∞ –ó–∞–ª–∏—à–æ–∫ –±—é–¥–∂–µ—Ç—É: {remaining_budget:.2f} –≥—Ä–Ω",
                         reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, f"‚úÖ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç–∏: {amount} –≥—Ä–Ω –Ω–∞ {category}", reply_markup=main_menu())

    user_data.pop(message.chat.id, None)


@bot.message_handler(commands=['budget'])
def check_budget(message):
    user_id = get_user_id(message.chat.id)
    remaining_budget = get_budget_balance(user_id)

    if remaining_budget is not None:
        bot.send_message(message.chat.id, f"üí∞ –í–∞—à –∑–∞–ª–∏—à–æ–∫ –±—é–¥–∂–µ—Ç—É: {remaining_budget:.2f} –≥—Ä–Ω")
    else:
        bot.send_message(message.chat.id, "‚ùå –í–∏ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –±—é–¥–∂–µ—Ç! –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é \"üí∞ –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—é–¥–∂–µ—Ç\".")


@bot.message_handler(commands=['addcategory'])
def add_category(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:")
    bot.register_next_step_handler(message, save_category)


def save_category(message):
    user_id = get_user_id(message.chat.id)
    category_name = message.text.strip()
    if category_name:
        try:
            cursor.execute("INSERT INTO categories (user_id, name) VALUES (?, ?)", (user_id, category_name))
            conn.commit()
            bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{category_name}' –¥–æ–¥–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ! ‚úÖ")
        except sqlite3.IntegrityError:
            bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{category_name}' –≤–∂–µ —ñ—Å–Ω—É—î! ‚ö†Ô∏è")
    else:
        bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


@bot.message_handler(commands=['stats'])
def view_stats(message):
    user_id = get_user_id(message.chat.id)
    cursor.execute(
        "SELECT date, category, SUM(amount) FROM expenses WHERE user_id = ? GROUP BY date, category ORDER BY date DESC",
        (user_id,))
    stats = cursor.fetchall()
    if stats:
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç:\n"
        current_date = None
        for date, category, total in stats:
            if date != current_date:
                current_date = date
                response += f"\nüìÖ {current_date}:\n"
            response += f"   {category}: {total} –≥—Ä–Ω\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –©–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏.")

def get_budget_balance(user_id):
    cursor.execute("SELECT amount FROM budgets WHERE user_id = ?", (user_id,))
    budget = cursor.fetchone()
    return budget[0] if budget else None


bot.polling(non_stop=True)
